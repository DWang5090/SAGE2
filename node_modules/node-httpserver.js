var fs = require('fs');
var url = require('url');

function httpserver(privateFiles) {
	this.privateFiles = privateFiles;
	this.postFuncs = {};
	this.onrequest = this.onreq.bind(this);
}

httpserver.prototype.onreq = function(req, res) {
	if(req.method == "GET"){
		var pathname = "." + url.parse(req.url).pathname;
		if(pathname == "./") pathname = "./index.html";
		
		if(this.isPrivate(pathname)) return;
		
		fs.readFile(pathname, "binary", function(err, data) {
			if(err){
				res.writeHead(500, {"Content-Type": "text/plain"});
				res.write(err + "\n\n");
				res.end();
				return;
			}
			
			var header = {};
			if     (pathname.indexOf(".html") >= 0)  header["Content-Type"] = "text/html";
			else if(pathname.indexOf(".css")  >= 0)  header["Content-Type"] = "text/css";
			else if(pathname.indexOf(".js")   >= 0)  header["Content-Type"] = "text/javascript";
			else                                     header["Content-Type"] = "text/plain";
			
			if(typeof req.headers.range !== 'undefined'){
				var range = req.headers.range; 
				var parts = range.replace(/bytes=/, "").split("-"); 
				var partialstart = parts[0]; 
				var partialend = parts[1];
			
				var total = data.length;
				
				var start = parseInt(partialstart, 10); 
				var end = partialend ? parseInt(partialend, 10) : total-1;
				
				header["Content-Range"] = "bytes " + start + "-" + end + "/" + (total);
				header["Accept-Ranges"] = "bytes";
				header["Content-Length"]= (end-start)+1;
				header["Transfer-Encoding"] = "chunked";
				header["Connection"] = "close";
				
				res.writeHead(206, header);
				res.write(data.slice(start, end)+"0", "binary");
			}
			else{
				res.writeHead(200, header );
				res.write(data, "binary");
			}
			
			res.end();
		});
	}
	else if(req.method == "POST"){
		var pathname = url.parse(req.url).pathname;		
		this.postFuncs[pathname](req, res);
	}
};

httpserver.prototype.post = function(name, callback) {
	this.postFuncs[name] = callback;
};

httpserver.prototype.isPrivate = function(pathname) {
	for(var i=0; i<this.privateFiles.length; i++){
		if(pathname.indexOf(this.privateFiles[i]) == 0) return true;
	}
	return false;
};

module.exports = httpserver;
