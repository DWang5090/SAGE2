diff -r 70757d011c75 binding.gyp
--- a/binding.gyp	Wed Nov 07 16:51:49 2012 +0100
+++ b/binding.gyp	Thu Nov 08 00:30:02 2012 +0100
@@ -1,7 +1,7 @@
 {
 	'targets': [{
 		'target_name': 'pdfutils',
-		"sources": [ "src/document.cc", "src/page.cc", "src/page_job.cc", "src/init.cc", "src/svg_size_hack.cc", ],
+		"sources": [ "src/document.cc", "src/page.cc", "src/page_job.cc", "src/init.cc", "src/svg_size_hack.cc", "src/link.cc" ],
 		'default_configuration': 'Debug',
 		'xcode_settings': {
 			'OTHER_CFLAGS': [
diff -r 70757d011c75 lib/pdfutils.js
--- a/lib/pdfutils.js	Wed Nov 07 16:51:49 2012 +0100
+++ b/lib/pdfutils.js	Thu Nov 08 00:30:02 2012 +0100
@@ -6,8 +6,10 @@
 try {
 	bindings = require('../build/Release/pdfutils');
 } catch (e) { try {
+	throw e;
 	bindings = require('../build/Debug/pdfutils');
 } catch (e) { try {
+	throw e;
 	bindings = require('../build/default/pdfutils');
 } catch (e) {
 	throw e;
diff -r 70757d011c75 src/document.cc
--- a/src/document.cc	Wed Nov 07 16:51:49 2012 +0100
+++ b/src/document.cc	Thu Nov 08 00:30:02 2012 +0100
@@ -122,37 +122,32 @@
 	this->handle_.Dispose();
 	this->jsbuffer.Dispose();
 
+	puts("unload document");
 }
 
 void  Document::BackgroundLoad(uv_work_t* handle) {
 	Document *self = (Document *)(handle->data);
-	int i = 0;
 	self->doc = poppler_document_new_from_data(self->buffer, self->buflen, NULL, NULL);
-	int pages = poppler_document_get_n_pages(self->doc);
-
-	self->pages = new std::vector<Page*>();
-	for(i = 0; i < pages; i++) {
-		self->pages->push_back(new Page(*self, i));
-	}
+	self->length = poppler_document_get_n_pages(self->doc);
 }
 
 void Document::BackgroundLoaded(uv_work_t* handle) {
 	Document *self = (Document *)(handle->data);
-	unsigned int i;
 	HandleScope scope;
 
-	unsigned int pages = self->pages->size();
-	for(i = 0; i < pages; i++) {
+	for(unsigned int i = 0; i < self->length; i++) {
 		std::stringstream istr;
 		istr << i;
-		self->handle_->Set(String::New(istr.str().c_str()),
-				(*self->pages)[i]->getObject(),
-				static_cast<v8::PropertyAttribute>(v8::ReadOnly)); 
+		self->handle_->SetAccessor(String::NewSymbol(istr.str().c_str()),
+				Document::GetPage, 0 /* setter */, Handle<Value>(), 
+				static_cast<v8::AccessControl>(DEFAULT), 
+				static_cast<v8::PropertyAttribute>(ReadOnly | DontEnum)
+				);
 	}
-	self->handle_->Set(String::New("length"), Local<Number>::New(Number::New(pages)), 
+	self->handle_->Set(String::New("length"), Local<Number>::New(Number::New(self->length)), 
 			static_cast<v8::PropertyAttribute>(v8::ReadOnly)); 
 
-	for(i = 0; i < LENGTH(properties); i++) {
+	for(unsigned int i = 0; i < LENGTH(properties); i++) {
 		self->handle_->Set(String::New(properties[i][1]), self->getProperty(properties[i][0]),
 				static_cast<v8::PropertyAttribute>(v8::ReadOnly));
 	}
@@ -172,6 +167,24 @@
 	self->state = WORKER_INACTIVE;
 }
 
+Handle<Value> Document::GetPage(Local<String> property, const AccessorInfo &info) {
+	HandleScope scope;
+	Document* self = ObjectWrap::Unwrap<Document>(info.This());
+
+	int n = atoi(*String::Utf8Value(property));
+	std::map<int, Page *>::iterator it = self->pages.find(n);
+	/*Page *page = (it != self->pages.end())
+		? page = it->second
+		: self->pages[n] = new Page(*self, n);*/
+	if(it != self->pages.end()) {
+		printf("%p\n", it->second);
+		self->pages[n] = new Page(*self, n);
+	}
+	return (new Page(*self, n))->handle_;
+
+	//return scope.Close(page->handle_);
+}
+
 void Document::addJob(PageJob *job) {
 	LOCK_JOB(this);
 	this->jobs.push(job);
diff -r 70757d011c75 src/document.h
--- a/src/document.h	Wed Nov 07 16:51:49 2012 +0100
+++ b/src/document.h	Thu Nov 08 00:30:02 2012 +0100
@@ -1,7 +1,7 @@
 #ifndef DOCUMENT_H
 #define DOCUMENT_H
 
-#include <vector>
+#include <map>
 #include <queue>
 #include <node.h>
 #include <poppler.h>
@@ -26,7 +26,8 @@
 
 	private:
 		v8::Persistent<v8::Function> loadCb;
-		std::vector<Page*> *pages;
+		unsigned int length;
+		std::map<int, Page*> pages;
 		std::queue<PageJob*> jobs;
 		uv_mutex_t jobMutex;
 		bool needMessage;
@@ -45,6 +46,8 @@
 		void loaded();
 		static v8::Handle<v8::Value> New(const v8::Arguments& args);
 		v8::Handle<v8::Value> getProperty(const char *key);
+
+		static v8::Handle<v8::Value> GetPage(v8::Local<v8::String> property, const v8::AccessorInfo &info);
 		
 		static void BackgroundLoad(uv_work_t* req);
 		static void BackgroundLoaded(uv_work_t* req);
diff -r 70757d011c75 src/init.cc
--- a/src/init.cc	Wed Nov 07 16:51:49 2012 +0100
+++ b/src/init.cc	Thu Nov 08 00:30:02 2012 +0100
@@ -2,6 +2,9 @@
 #include <node.h>
 #include <glib.h>
 #include "document.h"
+#include "page.h"
+#include "page_job.h"
+#include "link.h"
 
 using namespace v8;
 
@@ -10,6 +13,7 @@
 	Document::Init(target);
 	Page::Init(target);
 	PageJob::Init(target);
+	Link::Init(target);
 }
 
 NODE_MODULE(pdfutils, InitAll)
diff -r 70757d011c75 src/page.cc
--- a/src/page.cc	Wed Nov 07 16:51:49 2012 +0100
+++ b/src/page.cc	Thu Nov 08 00:30:02 2012 +0100
@@ -11,6 +11,7 @@
 #include "page_job.h"
 #include "document.h"
 #include "formats.h"
+#include "link.h"
 
 using namespace v8;
 using namespace node;
@@ -34,6 +35,10 @@
 		prt->Set(sym, fnc);
 	}
 
+	prt->SetAccessor(String::NewSymbol("links"), Page::GetLinks, 0 /* setter */, Handle<Value>(), 
+			static_cast<v8::AccessControl>(DEFAULT), 
+			static_cast<v8::PropertyAttribute>(ReadOnly | DontEnum)
+			);
 
 	constructor = Persistent<Function>::New(tpl->GetFunction());
 	target->Set(String::NewSymbol("Page"), constructor);
@@ -45,17 +50,18 @@
 	this->pg = poppler_document_get_page(this->document->doc, this->index);
 	poppler_page_get_size (this->pg, &this->w, &this->h);
 	this->label = poppler_page_get_label(this->pg);
+	this->createObject();
 }
 
 Page::~Page() {
 	g_free(this->label);
 	if(!this->handle_.IsEmpty())
 		this->handle_.Dispose();
+	printf("unload page %i\n", this->index);
 };
 
-Handle<Object> Page::getObject() {
-	if(!this->handle_.IsEmpty())
-		return this->handle_;
+void Page::createObject() {
+	HandleScope scope;
 
 	Handle<Value> argv[] = {
 		//this->document->handle_
@@ -71,76 +77,30 @@
 			static_cast<v8::PropertyAttribute>(v8::ReadOnly)); 
 	this->Wrap(Persistent<Object>::New(instance));
 
-	instance->Set(String::NewSymbol("links"), this->createLinks());
-
 	// TODO make weak if there are no jobs running on this page;
-
-	return instance;
 }
 
-Handle<Array> Page::createLinks() {
-	GList *links = poppler_page_get_link_mapping(this->pg), *p;
-	int length = g_list_length(links), i;
-	Local<Array> result = Array::New(length);
-	PopplerActionAny *action;
+Handle<Value> Page::GetLinks(Local< String > property, const AccessorInfo &info) {
+	HandleScope scope;
+	Page* self = ObjectWrap::Unwrap<Page>(info.This());
 
-	Local<Object> obj;
-	for (i = 0, p = links; p; p = p->next, i++) {
-		std::stringstream istr;
-		istr << i;
-		PopplerLinkMapping *link = (PopplerLinkMapping *) p->data;
-		char *title = ((PopplerActionAny *)link->action)->title;
-		obj = Object::New();
-		result->Set(String::NewSymbol(istr.str().c_str()), obj);
-		obj->Set(String::NewSymbol("x"),
-				Number::New(this->w - link->area.x1));
-		obj->Set(String::NewSymbol("y"),
-				Number::New(this->h - link->area.y1));
-		obj->Set(String::NewSymbol("width"),
-				Number::New(this->w - (link->area.x2 - link->area.x1)));
-		obj->Set(String::NewSymbol("height"),
-				Number::New(this->h - (link->area.y2 - link->area.x1)));
-		obj->Set(String::NewSymbol("title"),
-				title ? String::New(title) : Null());
-		
-		action = (PopplerActionAny *)link->action;
-		Handle<String> type = String::NewSymbol("type"); 
-		switch(action->type) {
-		case POPPLER_ACTION_GOTO_DEST:
-			obj->Set(type, String::New("goto"));
-			break;
-		case POPPLER_ACTION_GOTO_REMOTE:
-			obj->Set(type, String::New("remote"));
-			break;
-		case POPPLER_ACTION_LAUNCH:
-			obj->Set(type, String::New("launch"));
-			break;
-		case POPPLER_ACTION_URI:
-			obj->Set(type, String::New("uri"));
-			break;
-		case POPPLER_ACTION_NAMED:
-			obj->Set(type, String::New("named"));
-			break;
-		case POPPLER_ACTION_MOVIE:
-			obj->Set(type, String::New("movie"));
-			break;
-		case POPPLER_ACTION_RENDITION:
-			obj->Set(type, String::New("rendition"));
-			break;
-		case POPPLER_ACTION_OCG_STATE:
-			obj->Set(type, String::New("ocgState"));
-			break;
-		case POPPLER_ACTION_JAVASCRIPT:
-			obj->Set(type, String::New("javascript"));
-			break;
-		default:
-			obj->Set(type, Null());
-		}
+	if(!self->links.IsEmpty())
+		return self->links;
+
+	GList *glinks = poppler_page_get_link_mapping(self->pg), *p;
+	int length = g_list_length(glinks), i;
+	Local<Array> links = Array::New(length);
+
+	for (i = 0, p = glinks; p; p = p->next, i++) {
+		Link *link = new Link(self, (PopplerLinkMapping *) p->data);
+		links->Set(i, link->handle_);
 	}
 
+	poppler_page_free_link_mapping(glinks);
 
-	poppler_page_free_link_mapping(links);
-	return result;
+	self->links = Persistent<Array>::New(links);
+
+	return links;
 }
 
 Handle<Value> Page::ConvertTo(const Arguments& args) {
diff -r 70757d011c75 src/page.h
--- a/src/page.h	Wed Nov 07 16:51:49 2012 +0100
+++ b/src/page.h	Thu Nov 08 00:30:02 2012 +0100
@@ -12,19 +12,22 @@
 		static void Init(v8::Handle<v8::Object> target);
 		Document *document;
 		PopplerPage *pg;
-		v8::Handle<v8::Object> getObject();
 		Page(Document &document, int index);
+
 		double w;
 		double h;
 
 	private:
 		~Page();
+		v8::Persistent<v8::Array> links;
 
 		static v8::Handle<v8::Value> ConvertTo(const v8::Arguments& args);
 
 		static v8::Persistent<v8::Function> constructor;
 
-		v8::Handle<v8::Array> createLinks();
+		static v8::Handle<v8::Value> GetLinks(v8::Local<v8::String> property, const v8::AccessorInfo &info);
+
+		void createObject();
 
 		int index;
 		char *label;
diff -r 70757d011c75 src/page_job.cc
--- a/src/page_job.cc	Wed Nov 07 16:51:49 2012 +0100
+++ b/src/page_job.cc	Thu Nov 08 00:30:02 2012 +0100
@@ -59,6 +59,7 @@
 
 PageJob::~PageJob() {
 	this->handle_.Dispose();
+	printf("Unload pagejob");
 }
 
 void PageJob::calcDimensions(Local<Object> opt) {
