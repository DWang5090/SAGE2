var WebSocketServer = require('ws').Server;

function websocketIOServer(port) {
	this.wss = new WebSocketServer({port: port});
}

websocketIOServer.prototype.onconnection = function(callback) {
	this.wss.on('connection', function(ws) {
		ws.binaryType = "arraybuffer";
		
		var wsio = new websocketIO(ws);
		callback(wsio);
	});
};

function websocketIO(ws) {
	this.ws = ws;
	this.messages = {};
	this.remoteAddress = {address: ws._socket.remoteAddress, port: ws._socket.remotePort};
	
	var _this = this;
	this.ws.on('message', function(message) {
		if(typeof message === "string"){
			var msg = JSON.parse(message);
			if(msg.func in _this.messages){
				_this.messages[msg.func](msg.data);
			}
		}
		else{
			console.log("Error: message is not a binary string");
		}
	});
}

websocketIO.prototype.onclose = function(callback) {
	this.ws.on('close', function(){
		callback();
	});
};

websocketIO.prototype.on = function(name, callback) {
	this.messages[name] = callback;
};

websocketIO.prototype.emit = function(name, data) {
	if(name == null || name == ""){
		console.log("Error: no message name specified");
		return;
	}
	
	var message = {callbackName: name, data: data};
	console.log(name);
	if(name == "setItemPosition"){
		console.log("------------");
		console.log(message);
		console.log("------------");
		console.log(JSON.stringify(message));
	}
	
	// double error handling
	try {
		var msgString = JSON.stringify(message);
		this.ws.send(msgString, function(err){
			if(err) console.log(err);
			// else success
		});
	}
	catch(e) {
		console.log(e);
	}
};


module.exports = websocketIOServer;
